version: '3.5'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://$HOST_IP:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres_db:
    image: postgres
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - dbvolume:/var/lib/postgresql/data

  adminer:
    image: adminer
    container_name: adminer_app
    restart: always
    ports:
      - "9090:8080"

  bc-ms-api-gateway:
    build: ./bc-ms-api-gateway
    depends_on:
      - kafka
      - postgres_db
    networks:
      - backend
    ports:
      - 8001:8001
    environment:
      HOST_IP: ${HOST_IP}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}

  bc-ms-user:
    build: ./bc-ms-user
    depends_on:
      - kafka
      - postgres_db
      - bc-ms-api-gateway
    networks:
      - backend
    ports:
      - 8002:8002
    environment:
      HOST_IP: ${HOST_IP}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}

  bc-ms-product:
    build: ./bc-ms-product
    depends_on:
      - kafka
      - postgres_db
      - bc-ms-api-gateway
    networks:
      - backend
    ports:
      - 8003:8003
    environment:
      HOST_IP: ${HOST_IP}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}

  bc-ms-notification:
    build: ./bc-ms-notification
    depends_on:
      - kafka
    networks:
      - backend
    ports:
      - 8004:8004
    environment:
      HOST_IP: ${HOST_IP}


networks:
  backend:
    driver: bridge

volumes:
  dbvolume:
    external: false
